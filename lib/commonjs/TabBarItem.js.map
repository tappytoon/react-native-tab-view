{"version":3,"sources":["TabBarItem.tsx"],"names":["DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","TabBarItem","React","Component","render","route","navigationState","renderLabel","renderLabelPassed","renderIcon","renderBadge","getLabelText","getTestID","getAccessibilityLabel","getAccessible","activeColor","inactiveColor","pressColor","pressOpacity","labelStyle","style","onLayout","onPress","onLongPress","props","tabIndex","routes","indexOf","isFocused","index","labelText","currentColor","icon","label","styles","focused","color","undefined","marginTop","tabStyle","StyleSheet","flatten","isWidthSet","width","tabContainerStyle","flex","scene","accessibilityLabel","badge","selected","item","create","margin","backgroundColor","alignItems","justifyContent","padding","minHeight","position","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route, NavigationState } from './types';\nimport Animated from 'react-native-reanimated';\n\ntype Props<T extends Route> = {\n  position: Animated.Node<number>;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n\n  render() {\n    const {\n      route,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const labelText = getLabelText({ route });\n    const currentColor = isFocused ? activeColor : inactiveColor;\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      icon = (\n        <View style={styles.icon}>\n          {renderIcon({\n            route,\n            focused: isFocused,\n            color: currentColor,\n          })}\n        </View>\n      );\n    }\n\n    const renderLabel =\n      renderLabelPassed !== undefined\n        ? renderLabelPassed\n        : ({ color }: { route: T; color: string }) => {\n            if (typeof labelText === 'string') {\n              return (\n                <Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    { color },\n                    labelStyle,\n                  ]}\n                >\n                  {labelText}\n                </Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      label = (\n        <View>\n          {renderLabel({\n            route,\n            focused: isFocused,\n            color: currentColor,\n          })}\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle?.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <TouchableItem\n        borderless\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isFocused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"tab\"\n        accessibilityState={{ selected: isFocused }}\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={tabContainerStyle}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n});\n"]}